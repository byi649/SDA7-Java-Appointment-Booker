# based off https://github.com/SWEN900072021/Resources/blob/main/code_sample/security/swen90007_security_shiro/WebContent/WEB-INF/shiro.ini

[main]

shiro.loginUrl = /login.jsp
shiro.postOnlyLogout = false
logout.redirectUrl = /login.jsp

authc = Frontend.AuthFilter

#Data source
dataSource = org.postgresql.ds.PGSimpleDataSource
dataSource.url = jdbc:postgresql://ec2-44-193-150-214.compute-1.amazonaws.com:5432/d82056buk2tif9
dataSource.user = bicmfyjhlclanj
dataSource.password = 092c489bb378665abfd97c916ea980f10652a05a0f8f188caa342dcde483ba13

#Password matcher
passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
passwordMatcher.passwordService = $passwordService

#JDBC realm
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.permissionsLookupEnabled = false
jdbcRealm.authenticationQuery = SELECT Password FROM account WHERE Name = ?
jdbcRealm.userRolesQuery = SELECT Accounttypeid FROM account WHERE Name = ?
jdbcRealm.dataSource = $dataSource
jdbcRealm.credentialsMatcher = $passwordMatcher

#Assign the realm to the security manager
securityManager.realms = $jdbcRealm

[users]
# format: username = password, role1, role2, ..., roleN
#user = password,user
#admin = password,admin

[roles]
# format: roleName = permission1, permission2, ..., permissionN
# admin =
# user =
# hcp =

[urls]
# The /login.jsp is not restricted to authenticated users (otherwise no one could log in!), but
# the 'authc' filter must still be specified for it so it can process that url's
# login submissions. It is 'smart' enough to allow those requests through as specified by the
# shiro.loginUrl above.
/login.jsp = authc
/admin/logout = logout
/user/logout = logout
/hcp/logout = logout
/index.jsp = authc
/index = authc
/admin/** = authc, roles[2]
/hcp/** = authc, roles[3]
/user/** = authc, roles[1]